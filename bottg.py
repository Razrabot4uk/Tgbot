import asyncio
import re
import aiosqlite
from telethon import TelegramClient, events
from telethon.sessions import StringSession

# ------------------ –ù–ê–°–¢–†–û–ô–ö–ò ------------------
API_ID = 25319214
API_HASH = "dfccc6579aa1e0e25e5b59b02c1210f3"

SOURCE_CHANNELS = [
    "@serch",
    "@b_retail",
    "@ndnews24",
    "@moscowach",
    "@techatex",
    "@testvrggdju"
]

TARGET_CHANNEL = "@newsruchannel"
DB_PATH = "forwarded_posts.db"
SESSION_NAME = "my_account.session"

BOT_TOKEN = "6518436315:AAH1A7_hiPig-TkEXzqfCaLqRv_LhJfUfow"
# ------------------------------------------------

# ---------- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ----------
auth_phone = None
auth_code = None
auth_event = asyncio.Event()  # —Å–æ–±—ã—Ç–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

# ---------- –ö–ª–∏–µ–Ω—Ç —é–∑–µ—Ä–±–æ—Ç–∞ ----------
client = TelegramClient(SESSION_NAME, API_ID, API_HASH)

# ---------- –ö–ª–∏–µ–Ω—Ç –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ----------
bot = TelegramClient(StringSession(), API_ID, API_HASH)

# ------------------ –§–£–ù–ö–¶–ò–ò –ë–î ------------------
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS forwarded (
                message_id INTEGER,
                chat_id INTEGER,
                PRIMARY KEY (message_id, chat_id)
            )
        """)
        await db.commit()

async def is_forwarded(message_id, chat_id):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT 1 FROM forwarded WHERE message_id = ? AND chat_id = ?",
            (message_id, chat_id)
        ) as cursor:
            return await cursor.fetchone() is not None

async def mark_forwarded(message_id, chat_id):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT OR IGNORE INTO forwarded (message_id, chat_id) VALUES (?, ?)",
            (message_id, chat_id)
        )
        await db.commit()

# ------------------ –û–ß–ò–°–¢–ö–ê –¢–ï–ö–°–¢–ê ------------------
def clean_text(text: str | None) -> str | None:
    if not text:
        return None
    lines = text.splitlines()
    cleaned_lines = [line for line in lines if not re.search(r"(t\.me/|@)\S+", line)]
    result = "\n".join(cleaned_lines).strip()
    return result if result else None

# ------------------ –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–ë–´–¢–ò–ô –Æ–ó–ï–†–ë–û–¢–ê ------------------
@client.on(events.NewMessage(chats=SOURCE_CHANNELS))
async def handler(event):
    chat_id = event.chat_id
    msg_id = event.message.id
    if await is_forwarded(msg_id, chat_id):
        return

    caption = clean_text(event.message.message or event.message.text)

    try:
        if event.message.media:
            await client.send_file(TARGET_CHANNEL, event.message.media, caption=caption)
            print(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –º–µ–¥–∏–∞ –∏–∑ {event.chat.username or chat_id}")
        elif caption:
            await client.send_message(TARGET_CHANNEL, caption)
            print(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω —Ç–µ–∫—Å—Ç: {caption[:50]}...")
        else:
            print("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏, –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {e}")

    await mark_forwarded(msg_id, chat_id)

# ------------------ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ë–û–¢–ê ------------------
@bot.on(events.NewMessage(pattern='/start_auth'))
async def start_auth(event):
    await event.respond("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    bot.current_step = "phone"

@bot.on(events.NewMessage)
async def handle_message(event):
    global auth_phone, auth_code
    if getattr(bot, 'current_step', None) == "phone":
        auth_phone = event.message.text.strip()
        await event.respond(f"–ù–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω: {auth_phone}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
        bot.current_step = "code"
    elif getattr(bot, 'current_step', None) == "code":
        auth_code = event.message.text.strip()
        await event.respond("–ö–æ–¥ –ø–æ–ª—É—á–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
        bot.current_step = None
        auth_event.set()

# ------------------ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ------------------
async def main():
    await init_db()
    print("üöÄ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞.")
    
    # –°—Ç–∞—Ä—Ç—É–µ–º –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    await bot.start(bot_token=BOT_TOKEN)
    print("üí¨ –ë–æ—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start_auth –≤ Telegram.")

    # –ñ–¥–µ–º –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    while auth_phone is None:
        await asyncio.sleep(1)

    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telethon —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä –∏ –∫–æ–¥
    async with client:
        await client.start(
            phone=lambda: auth_phone,
            code_callback=lambda: (asyncio.create_task(auth_event.wait()), auth_code)[1]
        )
        print("‚úÖ –Æ–∑–µ—Ä–±–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç.")
        print("üöÄ –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")

        # –ó–∞–ø—É—Å–∫ —é–∑–µ—Ä–±–æ—Ç–∞ –∏ –±–æ—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        await asyncio.gather(
            client.run_until_disconnected(),
            bot.run_until_disconnected()
        )

if __name__ == "__main__":
    asyncio.run(main())