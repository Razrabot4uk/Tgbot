import re
import asyncio
import aiosqlite
from telethon import TelegramClient, events

# ------------------ –ù–ê–°–¢–†–û–ô–ö–ò ------------------
API_ID = 25319214
API_HASH = "dfccc6579aa1e0e25e5b59b02c1210f3"

# —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (—é–∑–µ—Ä–±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω!)
SOURCE_CHANNELS = [
    "@serch",
    "@b_retail",
    "@ndnews24",
    "@moscowach",
    "@techatex",
    "@testvrggdju"
]

# –∫–∞–Ω–∞–ª-—Ü–µ–ª—å, –∫—É–¥–∞ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –ø–æ—Å—Ç—ã
TARGET_CHANNEL = "@newsruchannel"

DB_PATH = "forwarded_posts.db"
SESSION_NAME = "my_account"  # —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –¥–ª—è Telethon
# ------------------------------------------------

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telethon
client = TelegramClient(SESSION_NAME, API_ID, API_HASH)


# ------------------ –ë–ê–ó–ê ------------------
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS forwarded (
                message_id INTEGER,
                chat_id INTEGER,
                PRIMARY KEY (message_id, chat_id)
            )
        """)
        await db.commit()

async def is_forwarded(message_id, chat_id):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT 1 FROM forwarded WHERE message_id = ? AND chat_id = ?",
            (message_id, chat_id)
        ) as cursor:
            return await cursor.fetchone() is not None

async def mark_forwarded(message_id, chat_id):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT OR IGNORE INTO forwarded (message_id, chat_id) VALUES (?, ?)",
            (message_id, chat_id)
        )
        await db.commit()


# ------------------ –û–ß–ò–°–¢–ö–ê –¢–ï–ö–°–¢–ê ------------------
def clean_text(text: str | None) -> str | None:
    if not text:
        return None

    lines = text.splitlines()
    cleaned_lines = [
        line for line in lines
        if not re.search(r"(t\.me/|@)\S+", line)
    ]
    result = "\n".join(cleaned_lines).strip()
    return result if result else None


# ------------------ –û–ë–†–ê–ë–û–¢–ß–ò–ö ------------------
@client.on(events.NewMessage(chats=SOURCE_CHANNELS))
async def handler(event):
    chat_id = event.chat_id
    msg_id = event.message.id

    if await is_forwarded(msg_id, chat_id):
        return  # —É–∂–µ –ø–µ—Ä–µ—Å—ã–ª–∞–ª–∏

    caption = clean_text(event.message.message or event.message.text)

    try:
        if event.message.media:
            await client.send_file(
                TARGET_CHANNEL,
                event.message.media,
                caption=caption
            )
            print(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –º–µ–¥–∏–∞ –∏–∑ {event.chat.username or chat_id}")
        elif caption:
            await client.send_message(TARGET_CHANNEL, caption)
            print(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω —Ç–µ–∫—Å—Ç: {caption[:50]}...")
        else:
            print("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏, –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {e}")

    await mark_forwarded(msg_id, chat_id)


# ------------------ –ì–õ–ê–í–ù–´–ô –¶–ò–ö–õ ------------------
async def main():
    await init_db()
    print("üöÄ –Æ–∑–µ—Ä–±–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")

    while True:  # –≤–µ—á–Ω—ã–π —Ü–∏–∫–ª
        try:
            await client.run_until_disconnected()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫...")
            await asyncio.sleep(5)


if __name__ == "__main__":
    with client:
        client.loop.run_until_complete(main())